[module generate('http://www.eclipse.org/emf/2002/Ecore')/]

[comment https://wiki.eclipse.org/Acceleo/User_Guide#If_Conditions /]
[template public generate(c : EClass)]
  [comment @main/]
	[file (c.name + '.cs', false, 'UTF-8')]
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
[c.usingList()/]

public class [c.genSuperTypes()/]
{
 [c.eAttributes.genAttributesDeclaration(false, c.isInterface())/]
 [c.eReferences.genReferencesDeclaration(false, c.isInterface())/]



		// Start is called before the first frame update
	    void Start()
	    {
	        
	    }
	
	    // Update is called once per frame
	    void Update()
	    {
	        
	    }
	}
	

	[/file]
[/template]

[template public generate(e : EEnum)]
      [comment @main/]
	[file (e.name + '.cs', false, 'UTF-8')]
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
	

	public enum [e.name/]  
	{
	    [e.genEnumValue()/]  
	}


	[/file]
[/template]

[template public genEnumValue(e : EEnum)]
[for (l : EEnumLiteral | e.eLiterals) separator (',\n')][l.name/][if (l.value <> null)] = [l.value/][else] = 0[/if][/for]
[/template]

[template public genClassName(c : EClass) post(trim())]
[if (c.isInterface())]interface
[elseif (c.isAbstract())]abstract class
[else]class
[/if]
[/template]

[template public genSuperTypes(c : EClass) post (replaceAll('\n', ''))]
[c.name/]
[if (c.isSuperType())]
[for (s : EClass | c.eSuperTypes) 
	before (' : ') separator (', ')][s.name/][/for]
[else]: MonoBehaviour
[/if]

[/template]

[template public genAttributes(a : EAttribute, isImplement : Boolean, inInterface : Boolean)]
[a.modifier(isImplement, inInterface)/] [a.typeName()/] _get_set_[a.name/] {get; set;}['\n'/]
[/template]

[template public genAttributesDeclaration(a : EAttribute, isImplement : Boolean, inInterface : Boolean)]
[a.modifier(isImplement, inInterface)/] [a.typeName()/] _[a.name/];['\n'/]
[/template]


[template public genReferences(r : EReference, isImplement : Boolean, inInterface : Boolean)]
[r.modifier(isImplement, inInterface)/] [r.typeName()/] _get_set_[r.name/] {get; set;}['\n'/]
[/template]

[template public genReferencesDeclaration(r : EReference, isImplement : Boolean, inInterface : Boolean)]
[r.modifier(isImplement, inInterface)/] [r.typeName()/] [r.name/];['\n'/]
[/template]

[template public typeName(a : EAttribute) post(trim())]
[if (a.upperBound > 1)]List<[a.eAttributeType.mapDataType().trim()/]>
[else][a.eAttributeType.mapDataType().trim()/]        
[/if]
[/template]

[template public typeName(r : EReference) post(trim())]
[if (r.upperBound > 1)]List<[r.eReferenceType.name/]>
[else][r.eReferenceType.name/]        
[/if]
[/template]

[template public modifier(a : EAttribute, isImplement : Boolean, inInterface : Boolean) post(trim())]
[if (not inInterface)]public         
[elseif (inInterface and isImplement)]new	
[/if]
[/template]

[template public modifier(r : EReference, isImplement : Boolean, inInterface : Boolean) post(trim())]
[if (not inInterface)]public         
[elseif (inInterface and isImplement)]new	
[/if]
[/template]

[template public mapDataType(t : EDataType)]
[if (t.name = 'EString')]string
	[elseif (t.name = 'EString')]string
	[elseif (t.name = 'EInt')]int
	[elseif (t.name = 'ELong')]long
	[elseif (t.name = 'EBoolean')]bool
	[else][t.name/]
[/if]
[/template]

[template public usingList(c : EClass) ? ((c.eAttributes->select(isList())->size() > 0) or (c.eReferences->select(isList())->size() > 0))]
using System.Collections.Generic;['\n'/]
[/template]

[template public implements(c : EClass) ? (c.eSuperTypes->select(isInterface())->size() > 0)]
[for (s : EClass | c.eSuperTypes)]
[if (s.isInterface())]
///Implements for [s.name/]
[s.eAttributes.genAttributes(true, c.isInterface())/]
[s.eReferences.genReferences(true, c.isInterface())/]
[/if]
[/for]
[/template]

[query public isList(a : EAttribute) : Boolean = a.upperBound > 1 /]
[query public isList(r : EReference) : Boolean = r.upperBound > 1 /]

[query public hasProperties(c : EClass) : Boolean = (c.eAttributes->size() > 0) or (c.eReferences->size() > 0) /]

[query public isSuperType(c : EClass) : Boolean = c.eSuperTypes->size()>0/]
[query public isInterface(c : EClass) : Boolean = c.interface and c.abstract /]
[query public isAbstract(c : EClass) : Boolean = not c.interface and c.abstract /]