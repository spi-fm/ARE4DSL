/**
 */
package aredsl.provider;

import aredsl.util.AredslAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AredslItemProviderAdapterFactory extends AredslAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AredslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Editor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditorItemProvider editorItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Editor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditorAdapter() {
		if (editorItemProvider == null) {
			editorItemProvider = new EditorItemProvider(this);
		}

		return editorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Layer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerItemProvider layerItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Layer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerAdapter() {
		if (layerItemProvider == null) {
			layerItemProvider = new LayerItemProvider(this);
		}

		return layerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.LabelStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelStyleItemProvider labelStyleItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.LabelStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelStyleAdapter() {
		if (labelStyleItemProvider == null) {
			labelStyleItemProvider = new LabelStyleItemProvider(this);
		}

		return labelStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Model3DNodeStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Model3DNodeStyleItemProvider model3DNodeStyleItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Model3DNodeStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModel3DNodeStyleAdapter() {
		if (model3DNodeStyleItemProvider == null) {
			model3DNodeStyleItemProvider = new Model3DNodeStyleItemProvider(this);
		}

		return model3DNodeStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Image2DNodeStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Image2DNodeStyleItemProvider image2DNodeStyleItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Image2DNodeStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImage2DNodeStyleAdapter() {
		if (image2DNodeStyleItemProvider == null) {
			image2DNodeStyleItemProvider = new Image2DNodeStyleItemProvider(this);
		}

		return image2DNodeStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.GeometricShapeNodeStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeometricShapeNodeStyleItemProvider geometricShapeNodeStyleItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.GeometricShapeNodeStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeometricShapeNodeStyleAdapter() {
		if (geometricShapeNodeStyleItemProvider == null) {
			geometricShapeNodeStyleItemProvider = new GeometricShapeNodeStyleItemProvider(this);
		}

		return geometricShapeNodeStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Edge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeItemProvider edgeItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Edge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeAdapter() {
		if (edgeItemProvider == null) {
			edgeItemProvider = new EdgeItemProvider(this);
		}

		return edgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.EdgeStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeStyleItemProvider edgeStyleItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.EdgeStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeStyleAdapter() {
		if (edgeStyleItemProvider == null) {
			edgeStyleItemProvider = new EdgeStyleItemProvider(this);
		}

		return edgeStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Tool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolItemProvider toolItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Tool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolAdapter() {
		if (toolItemProvider == null) {
			toolItemProvider = new ToolItemProvider(this);
		}

		return toolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.CreateInstanceOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateInstanceOperationItemProvider createInstanceOperationItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.CreateInstanceOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateInstanceOperationAdapter() {
		if (createInstanceOperationItemProvider == null) {
			createInstanceOperationItemProvider = new CreateInstanceOperationItemProvider(this);
		}

		return createInstanceOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.RemoveOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveOperationItemProvider removeOperationItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.RemoveOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveOperationAdapter() {
		if (removeOperationItemProvider == null) {
			removeOperationItemProvider = new RemoveOperationItemProvider(this);
		}

		return removeOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.SetOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetOperationItemProvider setOperationItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.SetOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetOperationAdapter() {
		if (setOperationItemProvider == null) {
			setOperationItemProvider = new SetOperationItemProvider(this);
		}

		return setOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.UnsetOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnsetOperationItemProvider unsetOperationItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.UnsetOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnsetOperationAdapter() {
		if (unsetOperationItemProvider == null) {
			unsetOperationItemProvider = new UnsetOperationItemProvider(this);
		}

		return unsetOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.ToolSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolSetItemProvider toolSetItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.ToolSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolSetAdapter() {
		if (toolSetItemProvider == null) {
			toolSetItemProvider = new ToolSetItemProvider(this);
		}

		return toolSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.ChangeContextOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeContextOperationItemProvider changeContextOperationItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.ChangeContextOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeContextOperationAdapter() {
		if (changeContextOperationItemProvider == null) {
			changeContextOperationItemProvider = new ChangeContextOperationItemProvider(this);
		}

		return changeContextOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.MarkerBasedTrackerAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkerBasedTrackerActionItemProvider markerBasedTrackerActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.MarkerBasedTrackerAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkerBasedTrackerActionAdapter() {
		if (markerBasedTrackerActionItemProvider == null) {
			markerBasedTrackerActionItemProvider = new MarkerBasedTrackerActionItemProvider(this);
		}

		return markerBasedTrackerActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.MarkerLessTrackerAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkerLessTrackerActionItemProvider markerLessTrackerActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.MarkerLessTrackerAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkerLessTrackerActionAdapter() {
		if (markerLessTrackerActionItemProvider == null) {
			markerLessTrackerActionItemProvider = new MarkerLessTrackerActionItemProvider(this);
		}

		return markerLessTrackerActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.SensorBasedAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorBasedActionItemProvider sensorBasedActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.SensorBasedAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorBasedActionAdapter() {
		if (sensorBasedActionItemProvider == null) {
			sensorBasedActionItemProvider = new SensorBasedActionItemProvider(this);
		}

		return sensorBasedActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.GestureAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GestureActionItemProvider gestureActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.GestureAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGestureActionAdapter() {
		if (gestureActionItemProvider == null) {
			gestureActionItemProvider = new GestureActionItemProvider(this);
		}

		return gestureActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.VoiceAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoiceActionItemProvider voiceActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.VoiceAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoiceActionAdapter() {
		if (voiceActionItemProvider == null) {
			voiceActionItemProvider = new VoiceActionItemProvider(this);
		}

		return voiceActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.MentalAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MentalActionItemProvider mentalActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.MentalAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMentalActionAdapter() {
		if (mentalActionItemProvider == null) {
			mentalActionItemProvider = new MentalActionItemProvider(this);
		}

		return mentalActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.TactileAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TactileActionItemProvider tactileActionItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.TactileAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTactileActionAdapter() {
		if (tactileActionItemProvider == null) {
			tactileActionItemProvider = new TactileActionItemProvider(this);
		}

		return tactileActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.MoveElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveElementItemProvider moveElementItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.MoveElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveElementAdapter() {
		if (moveElementItemProvider == null) {
			moveElementItemProvider = new MoveElementItemProvider(this);
		}

		return moveElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.ShowSystemMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShowSystemMenuItemProvider showSystemMenuItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.ShowSystemMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShowSystemMenuAdapter() {
		if (showSystemMenuItemProvider == null) {
			showSystemMenuItemProvider = new ShowSystemMenuItemProvider(this);
		}

		return showSystemMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.ArrangeElements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrangeElementsItemProvider arrangeElementsItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.ArrangeElements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrangeElementsAdapter() {
		if (arrangeElementsItemProvider == null) {
			arrangeElementsItemProvider = new ArrangeElementsItemProvider(this);
		}

		return arrangeElementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aredsl.Exit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExitItemProvider exitItemProvider;

	/**
	 * This creates an adapter for a {@link aredsl.Exit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExitAdapter() {
		if (exitItemProvider == null) {
			exitItemProvider = new ExitItemProvider(this);
		}

		return exitItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (editorItemProvider != null)
			editorItemProvider.dispose();
		if (layerItemProvider != null)
			layerItemProvider.dispose();
		if (nodeItemProvider != null)
			nodeItemProvider.dispose();
		if (labelStyleItemProvider != null)
			labelStyleItemProvider.dispose();
		if (model3DNodeStyleItemProvider != null)
			model3DNodeStyleItemProvider.dispose();
		if (image2DNodeStyleItemProvider != null)
			image2DNodeStyleItemProvider.dispose();
		if (geometricShapeNodeStyleItemProvider != null)
			geometricShapeNodeStyleItemProvider.dispose();
		if (labelItemProvider != null)
			labelItemProvider.dispose();
		if (edgeItemProvider != null)
			edgeItemProvider.dispose();
		if (edgeStyleItemProvider != null)
			edgeStyleItemProvider.dispose();
		if (toolItemProvider != null)
			toolItemProvider.dispose();
		if (createInstanceOperationItemProvider != null)
			createInstanceOperationItemProvider.dispose();
		if (removeOperationItemProvider != null)
			removeOperationItemProvider.dispose();
		if (setOperationItemProvider != null)
			setOperationItemProvider.dispose();
		if (unsetOperationItemProvider != null)
			unsetOperationItemProvider.dispose();
		if (toolSetItemProvider != null)
			toolSetItemProvider.dispose();
		if (changeContextOperationItemProvider != null)
			changeContextOperationItemProvider.dispose();
		if (markerBasedTrackerActionItemProvider != null)
			markerBasedTrackerActionItemProvider.dispose();
		if (markerLessTrackerActionItemProvider != null)
			markerLessTrackerActionItemProvider.dispose();
		if (sensorBasedActionItemProvider != null)
			sensorBasedActionItemProvider.dispose();
		if (gestureActionItemProvider != null)
			gestureActionItemProvider.dispose();
		if (voiceActionItemProvider != null)
			voiceActionItemProvider.dispose();
		if (mentalActionItemProvider != null)
			mentalActionItemProvider.dispose();
		if (tactileActionItemProvider != null)
			tactileActionItemProvider.dispose();
		if (moveElementItemProvider != null)
			moveElementItemProvider.dispose();
		if (showSystemMenuItemProvider != null)
			showSystemMenuItemProvider.dispose();
		if (arrangeElementsItemProvider != null)
			arrangeElementsItemProvider.dispose();
		if (exitItemProvider != null)
			exitItemProvider.dispose();
	}

}
